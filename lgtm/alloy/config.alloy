otelcol.receiver.otlp "app_log" {
  http { endpoint = "0.0.0.0:4318" }
  output {
    logs = [otelcol.processor.attributes.label_hints.input]
  }
}

otelcol.processor.attributes "label_hints" {
  action {
    key    = "loki.attribute.labels"
    action = "insert"
    value  = "severity, method, http.route"
  }

  // Resource attributes -> labels (stable identifiers)
  action {
    key    = "loki.resource.labels"
    action = "insert"
    value  = "service.name, service.namespace, deployment.environment"
  }
  
  output { logs = [otelcol.exporter.loki.to_loki.input] }
}

otelcol.exporter.loki "to_loki" {
  forward_to = [loki.write.grafana_loki.receiver]
}

// PROMTAIL EXAMPLE

local.file_match "local_file" {
  path_targets = [{
    __address__ = "localhost",
    __path__    = "/var/log/*.log",
    job         = string.format("%s-logs", constants.hostname),
  }]
  sync_period = "5s"
}

loki.source.file "log_scrape" {
  targets               = local.file_match.local_file.targets
  forward_to            = [loki.process.filter_logs.receiver]
  tail_from_end         = true
}

loki.process "filter_logs" {
  stage.drop {
    source = ""
    expression  = ".*Connection closed by authenticating user root"
    drop_counter_reason = "noisy"
  }
  forward_to = [loki.write.grafana_loki.receiver]
}

// TARGETS

loki.write "grafana_loki" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
  }
  external_labels = {}
}
